version: "3.8"

networks:
  wordle-network:
    driver: bridge
    name: wordle-network

volumes:
  postgres-main-data:
    name: wordle-postgres-main
  postgres-dict-data:
    name: wordle-postgres-dict
  redis-data:
    name: wordle-redis

services:
  # =============================================================================
  # FRONTEND SERVICE (Port 8080 - External Access via /dev11)
  # =============================================================================
  frontend:
    build:
      context: ../wordle-frontend
      dockerfile: Dockerfile
      target: production
    container_name: wordle-frontend
    ports:
      - "${FRONTEND_HOST:-127.0.10.11}:${FRONTEND_PORT:-8080}:80"
    environment:
      - NODE_ENV=production
      - REACT_APP_API_BASE_URL=${REACT_APP_API_BASE_URL:-http://devstud.imn.htwk-leipzig.de/dev11/api}
      - REACT_APP_OAUTH_CLIENT_ID=${OAUTH_CLIENT_ID}
      - REACT_APP_OAUTH_REDIRECT_URL=${OAUTH_REDIRECT_URL}
      - REACT_APP_APP_NAME=${APP_NAME:-Wordle}
      - REACT_APP_VERSION=${APP_VERSION:-1.0.0}
    networks:
      - wordle-network
    depends_on:
      api-gateway:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=PathPrefix(`/dev11`)"

  # =============================================================================
  # API GATEWAY SERVICE (Port 8082 - External Access via /dev11/api)
  # =============================================================================
  api-gateway:
    build:
      context: ../wordle-api-gateway
      dockerfile: Dockerfile
      target: production
    container_name: wordle-api-gateway
    ports:
      - "${API_GATEWAY_HOST:-127.0.10.11}:${API_GATEWAY_PORT:-8082}:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
      - LOG_LEVEL=${LOG_LEVEL:-info}

      # JWT Configuration
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRES_IN=${JWT_EXPIRES_IN:-24h}

      # Service URLs (Internal Docker Network)
      - USER_SERVICE_URL=http://user-service:3002
      - GAME_SERVICE_URL=http://game-service:3001
      - PROFILE_SERVICE_URL=http://profile-service:3003

      # Redis Configuration
      - REDIS_URL=redis://redis:6379
      - REDIS_TTL=${REDIS_TTL:-3600}

      # Rate Limiting
      - RATE_LIMIT_WINDOW_MS=${RATE_LIMIT_WINDOW_MS:-900000}
      - RATE_LIMIT_MAX_REQUESTS=${RATE_LIMIT_MAX_REQUESTS:-100}

      # CORS Configuration
      - CORS_ORIGIN=${CORS_ORIGIN:-http://devstud.imn.htwk-leipzig.de}

      # Health Check Configuration
      - HEALTH_CHECK_INTERVAL=${HEALTH_CHECK_INTERVAL:-30000}

    networks:
      - wordle-network
    depends_on:
      user-service:
        condition: service_healthy
      game-service:
        condition: service_healthy
      profile-service:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api-gateway.rule=PathPrefix(`/dev11/api`)"

  # =============================================================================
  # BUSINESS SERVICES (Internal Network Only)
  # =============================================================================

  user-service:
    build:
      context: ../wordle-user-service
      dockerfile: Dockerfile
      target: production
    container_name: wordle-user-service
    expose:
      - "3002"
    environment:
      - NODE_ENV=production
      - PORT=3002
      - LOG_LEVEL=${LOG_LEVEL:-info}

      # Database Configuration
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres-main:5432/${POSTGRES_DB}
      - DB_POOL_MIN=${DB_POOL_MIN:-2}
      - DB_POOL_MAX=${DB_POOL_MAX:-10}

      # Redis Configuration
      - REDIS_URL=redis://redis:6379
      - SESSION_TTL=${SESSION_TTL:-86400}

      # JWT Configuration
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRES_IN=${JWT_EXPIRES_IN:-24h}
      - REFRESH_TOKEN_EXPIRES_IN=${REFRESH_TOKEN_EXPIRES_IN:-7d}

      # OAuth2 Configuration
      - OAUTH_GITLAB_CLIENT_ID=${OAUTH_GITLAB_CLIENT_ID}
      - OAUTH_GITLAB_CLIENT_SECRET=${OAUTH_GITLAB_CLIENT_SECRET}
      - OAUTH_GITLAB_REDIRECT_URI=${OAUTH_GITLAB_REDIRECT_URI}
      - OAUTH_GITLAB_BASE_URL=${OAUTH_GITLAB_BASE_URL:-https://git.imn.htwk-leipzig.de}

      # Security Configuration
      - BCRYPT_ROUNDS=${BCRYPT_ROUNDS:-12}
      - PASSWORD_MIN_LENGTH=${PASSWORD_MIN_LENGTH:-8}
      - ACCOUNT_LOCKOUT_ATTEMPTS=${ACCOUNT_LOCKOUT_ATTEMPTS:-5}

    networks:
      - wordle-network
    depends_on:
      postgres-main:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  game-service:
    build:
      context: ../wordle-game-service
      dockerfile: Dockerfile
      target: production
    container_name: wordle-game-service
    expose:
      - "3001"
    environment:
      - NODE_ENV=production
      - PORT=3001
      - LOG_LEVEL=${LOG_LEVEL:-info}

      # Database Configuration
      - DICT_DATABASE_URL=postgresql://${DICT_POSTGRES_USER}:${DICT_POSTGRES_PASSWORD}@postgres-dict:5432/${DICT_POSTGRES_DB}
      - GAME_DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres-main:5432/${POSTGRES_DB}

      # Game Configuration
      - MAX_GUESSES=${MAX_GUESSES:-6}
      - WORD_LENGTH=${WORD_LENGTH:-5}
      - DAILY_WORD_SEED=${DAILY_WORD_SEED}
      - GAME_TIMEOUT_MINUTES=${GAME_TIMEOUT_MINUTES:-60}

      # Dictionary Configuration
      - ENABLE_HARD_MODE=${ENABLE_HARD_MODE:-true}
      - ALLOW_PROPER_NOUNS=${ALLOW_PROPER_NOUNS:-false}
      - MIN_WORD_FREQUENCY=${MIN_WORD_FREQUENCY:-1000}

      # Cache Configuration
      - WORD_CACHE_TTL=${WORD_CACHE_TTL:-3600}
      - DAILY_WORD_CACHE_TTL=${DAILY_WORD_CACHE_TTL:-86400}

    networks:
      - wordle-network
    depends_on:
      postgres-main:
        condition: service_healthy
      postgres-dict:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  profile-service:
    build:
      context: ../wordle-profile-service
      dockerfile: Dockerfile
      target: production
    container_name: wordle-profile-service
    expose:
      - "3003"
    environment:
      - NODE_ENV=production
      - PORT=3003
      - LOG_LEVEL=${LOG_LEVEL:-info}

      # Database Configuration
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres-main:5432/${POSTGRES_DB}

      # Statistics Configuration
      - STATS_CALCULATION_INTERVAL=${STATS_CALCULATION_INTERVAL:-300000}
      - LEADERBOARD_UPDATE_INTERVAL=${LEADERBOARD_UPDATE_INTERVAL:-600000}
      - LEADERBOARD_SIZE=${LEADERBOARD_SIZE:-100}

      # Social Features Configuration
      - MAX_POSTS_PER_USER=${MAX_POSTS_PER_USER:-50}
      - MAX_POST_LENGTH=${MAX_POST_LENGTH:-500}
      - ENABLE_POST_MODERATION=${ENABLE_POST_MODERATION:-true}

      # File Upload Configuration (if needed)
      - MAX_AVATAR_SIZE=${MAX_AVATAR_SIZE:-1048576}
      - ALLOWED_IMAGE_TYPES=${ALLOWED_IMAGE_TYPES:-jpg,jpeg,png,webp}

    networks:
      - wordle-network
    depends_on:
      postgres-main:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3003/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # =============================================================================
  # DATABASE SERVICES (Internal Network Only)
  # =============================================================================

  postgres-main:
    image: postgres:15-alpine
    container_name: wordle-postgres-main
    expose:
      - "5432"
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_INITDB_ARGS=--encoding=UTF8 --locale=C
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - postgres-main-data:/var/lib/postgresql/data
      - ./sql/init-main-db.sql:/docker-entrypoint-initdb.d/01-init-main-db.sql:ro
      - ./sql/seed-main-db.sql:/docker-entrypoint-initdb.d/02-seed-main-db.sql:ro
    networks:
      - wordle-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    command: >
      postgres
      -c max_connections=100
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
      -c work_mem=4MB
      -c min_wal_size=1GB
      -c max_wal_size=4GB

  postgres-dict:
    image: postgres:15-alpine
    container_name: wordle-postgres-dict
    expose:
      - "5432"
    environment:
      - POSTGRES_USER=${DICT_POSTGRES_USER}
      - POSTGRES_PASSWORD=${DICT_POSTGRES_PASSWORD}
      - POSTGRES_DB=${DICT_POSTGRES_DB}
      - POSTGRES_INITDB_ARGS=--encoding=UTF8 --locale=C
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - postgres-dict-data:/var/lib/postgresql/data
      - ./sql/init-dict-db.sql:/docker-entrypoint-initdb.d/01-init-dict-db.sql:ro
      - ./sql/seed-dict-db.sql:/docker-entrypoint-initdb.d/02-seed-dict-db.sql:ro
      - ./data/words.csv:/tmp/words.csv:ro
    networks:
      - wordle-network
    restart: unless-stopped
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U ${DICT_POSTGRES_USER} -d ${DICT_POSTGRES_DB}",
        ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  redis:
    image: redis:7-alpine
    container_name: wordle-redis
    expose:
      - "6379"
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    command: >
      redis-server
      --appendonly yes
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --requirepass ${REDIS_PASSWORD}
      --tcp-keepalive 60
      --timeout 300
    volumes:
      - redis-data:/data
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - wordle-network
    restart: unless-stopped
    healthcheck:
      test:
        [
          "CMD",
          "redis-cli",
          "--no-auth-warning",
          "-a",
          "${REDIS_PASSWORD}",
          "ping",
        ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # =============================================================================
  # MONITORING & UTILITIES (Optional but Recommended)
  # =============================================================================

  nginx-proxy:
    image: nginx:alpine
    container_name: wordle-nginx-proxy
    ports:
      - "${NGINX_HTTP_PORT:-80}:80"
      - "${NGINX_HTTPS_PORT:-443}:443"
    volumes:
      - ./config/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/ssl/certs:ro
    networks:
      - wordle-network
    depends_on:
      - frontend
      - api-gateway
    restart: unless-stopped
    profiles:
      - production
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Database migration service (runs once)
  db-migrate:
    build:
      context: ./migrations
      dockerfile: Dockerfile
    container_name: wordle-db-migrate
    environment:
      - MAIN_DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres-main:5432/${POSTGRES_DB}
      - DICT_DATABASE_URL=postgresql://${DICT_POSTGRES_USER}:${DICT_POSTGRES_PASSWORD}@postgres-dict:5432/${DICT_POSTGRES_DB}
      - MIGRATION_MODE=${MIGRATION_MODE:-latest}
    networks:
      - wordle-network
    depends_on:
      postgres-main:
        condition: service_healthy
      postgres-dict:
        condition: service_healthy
    restart: "no"
    profiles:
      - migration
